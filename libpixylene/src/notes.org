#+title: Pixylene Notes
#+author: Bhavya Kukkar
* TASKS
#+description: Tasks that need to be done
** FOCUSSED "SPRINT"
:PROPERTIES:
:COOKIE_DATA: todo
:END:
*** Next [0%]
**** TODO actually use layer opacity & mute in Layer::merge
**** TODO target_minibuf: convert keys [[https://docs.rs/minifb/latest/src/minifb/key.rs.html#2][minifb]] [[https://docs.rs/crossterm/latest/crossterm/event/struct.KeyEvent.html][crossterm]]
**** TODO Clap parses PathBuf instead of path string [[https://www.rustadventure.dev/introducing-clap/clap-v4/accepting-file-paths-as-arguments-in-clap][Tutorial]]
**** TODO RectangularOutline, CircularFill Action
**** TODO Png to/fro Scene: fill more color-type/bit-depth combos
**** TODO (pixylenetui) refresh on terminal resize for both targets [[https://docs.rs/crossterm/latest/crossterm/event/enum.Event.html#variant.Resize][Resize]]
**** TODO helper screen to show keybind <-> actions map

*** Making It Enjoyable To Use [15%]
**** TODO switch x and y syntax since game design often uses flipped
**** TODO let (x,y) parse into UCoord/Coord in lua interface
**** TODO Flexbox to arrange statusbar items
**** DONE restructuring: rename common to types and put layer mod in project mod (layer, camera, scene & palette all are composed children of Project)
**** TODO a way to let actions called by perform_action be untracked. they should be able to set with a boolean in pixylenetui/actions.rs
**** TODO copy-and-paste action that actually copies the pixels to clipboard
**** TODO _PROJECT FILE_ [0/3]
***** TODO projects can also be filed in plaintext so people can use vcs on them. its slightly overkill to be saving cursors and focus and camera anyway
***** TODO plaintext config for default impl of Pixylene::import & Pixylene::new that includes palette (emphasis on palette and not the other struct fields)
***** TODO there should be a straightforward way to change the palette of an existing project. plaintext project files will make this so so easy
**** TODO new actions 'GoTo' (to get something like vim's 'gg' and 0) and 'ClearAllCursors'
**** TODO complex actions that perform multiple smaller actions, when one of those smaller actions fail, should take the changes of the successful and perform them to revert them back
**** TODO downscaling of artwork while importing (1280x1280 "/10" = 128x128)
**** TODO add_action may throw err if action-name already exists
**** TODO fully replace crossterm::execute!() with crossterm::queue!()
**** DONE get rid of warnings & dead code. p.s. PixyleneDisplay is not being used anywhere
**** TODO use more iterators: impl iterator for scene, return of render_scene and return of render_layer
**** TODO add more metamethods to Lua interface to Coord (==, <, <=, -, %, //, __tostring, etc.)

*** Dont Feel Proud About Doing This Tiny Tasks [0%]
**** TODO deprecate MoveOneCursor in favorof SetOneCursor
**** TODO divide pixylenetui/main.rs into two fns where second function returns result and main just logs all errors to cmdout()

*** Making It Pretentious/Prestigious [0%]
**** TODO safe Coord (& other types) methods like add_safe, add_mut_safe, mult_safe & mult_mut_safe
**** TODO clap initializer for Pixylene::new() that opens inquire menu when called "$ pixylenetui new". optional flag -y takes default for all settings
**** TODO perform_action returns VecDeque of Change's
**** TODO Mode that lets you 'write' colors line-by-line, left-to-right
**** TODO use Decorate::output() again & fix parameters (String vs &static 'str)
**** TODO "Dependency Justification" for paper like done on crossterm's github
**** TODO metadata field on project that lets you write "tags" to pixels on a layer or directly to layer and lets you search for them later
**** TODO layers vec and layer_order are separate and "tag-based" so that moving layers is trivial
**** TODO change-tree instead of change-stack, doesn't forget future changes after changes in undoed state
**** TODO alternative fn ActionManager::perform_directly() directly takes dyn Action

*** Needs Debate [25%]
**** DONE only 1 mode for selections, and three kinds of selections allowed: block, row or column
**** TODO some kind of global opacity control setting for pencils
**** TODO consider moving camera out of project and directly in pixylene
**** DONE project is immutable, scene-locking actions receive the mutable scene but can use the immutable project for things like Project.getFocus(), similar for camera-locking actions; criticize the difference between a "scene-locking" action & a "camera-locking" action
**** TODO layer mute can be modified by giving user string like 1011101 indicating layers currently showing and user can modify and submit (like dwm)
**** TODO defined palette contains 10 colors, foreground+background+eight defined colors. switchForeground is a wrapper that performs Palette.changeTo(1, <input>). switchBackground is a wrapper that performs Palette.changeTo(2, <input>)
**** TODO Action::perform_action returns Changes::Single or Change::Multiple
**** TODO PixyleneError::NoLayersToExport

* PROS & CONS
#+description: I weigh the pros and cons for a feature or decision here
- [X] SELECTIONS MANAGED BY AN ACTION vs CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
  1. SELECTIONS MANAGED BY AN ACTION
     _Pros:_
     + no extra features need to be implemented
     _Cons:_
     + simple tasks like copy & paste are usually native behavior
     + performing action for each pixel in selection will be really difficult since requires selection Action to perform unknown runtime chosen per-pixel Action [ deal-breaker ]
  2. CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
     _Pros:_
     _Cons:_
     + medium feature integration
     + selections might be native, copy and paste still needs an action but smaller
- [X] LAYER INDEX ARE 1-BASE INDEXED
  _Pros:_
  - index 0 can denote all layers, in Preview mode, 0 can be used to preview project
  - dwm does it too (actually every wm)
  _Cons:_
  - none
- [X] LAYER NEW/DELETE ARE PROJECT METHODS INSTEAD OF ACTIONS
  _Pros:_
  _Cons:_
  - cannot be undoed
  - more difficult to implement

* STRUCTURE
#+description: I document the structure of my application here
** KEY MODES
*** Vim Like
**** NORMAL
cc -> clear cursors (now no-cursor errors)
cl -> add all pixels on layer to cursor
ca -> add all pixels in project to

**** PREVIEW
0 -> entire project
i -> layer i
default -> last open or entire project is last open corresponds to deleted layer

**** GRID SELECTION
add cursors by dragging second corner of rectangle

**** POINT SELECTION
add cursors one by one by navigating and hitting Enter

*** Emacs Like

- *_Basic_*
  - _Up, Down, Left, Right_

- *_Project_*
  - _Ctrl+O_: toggle ooze mode in which equipped color is filled to every new pixel that is navigated to
    (other synonyms to use if name-collision: dispense, dribble, spill, drip, drizzle)
  - _Ctrl+S_: start default or previous shape
  - _Ctrl+Shift+S_: select new shape and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+E_: start default or previously shaped eraser
  - _Ctrl+Shift+E_: select new shape for eraser and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+C_:
  - _Ctrl+L_: manage layer
    - _n_: new layer
    - _d_: delete layer
    - _r_: rename layer
    - _c_: clone layer
    - _-_: go to lower layer
    - _+_: go to upper layer
    - _[0-9]_: go to ith layer
  - _Alt+x_: command

- *_Session_*
  - _Ctrl+S_: save project
  - _Ctrl+Z_: undo
  - _Ctrl+Y_: redo
  - _command<ex>_: export

** STATUSLINE
*([mode]) ([layer 1 of 5]) ([2+8 palette colors]) ([current-action] [scene-locked?] [camera-locked?]) ([3 cursors])*

** STATE
|               | NoProjectOpen | ProjectOpen                         |
|---------------+---------------+-------------------------------------|
| NoProjectOpen |               | open_project, open_png, new_project |
| ProjectOpen   | close_project |                                     |
|               |               |                                     |

** OFFICIAL DOCUMENTATION
Actions are of two types:
    1. Primitive:
    2. Complex:

** SESSION
- Option<last_previewed_layer>
- Option<imported_png_path>
- Option<opened_project_path>

** COMMANDS
| Command              | Arguments    | Session                                                           | Done |
|----------------------+--------------+-------------------------------------------------------------------+------|
| quit                 | -            | -                                                                 |      |
| open                 | project-path | > project-path; > project; < project-path?                        |      |
| save                 | -            | < project-path; < project                                         |      |
| import               | png-path     | > project; > project-path? (store in same directory); > png-path? |      |
| export               | png-path     | < png-path?                                                       |      |
| perform              | action-name  | < action-manager; < project                                       |      |
| view                 |              | < project                                                         |      |
| layer new            |              | < project; < background-color                                     |      |
| layer <> del         |              | < project                                                         |      |
| layer <> set_opacity | opacity      | < project                                                         |      |
| palette <> set       | color        | < project                                                         |      |
