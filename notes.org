#+title: Pixylene Notes
#+author: Bhavya Kukkar
* TASKS
** Next
*** DONE you are now ready to serialize commands with clap instead of toml
*** DONE dimensions should show on statusline
*** DONE PrintCommandList to print possible commands. can be done simply with parse_cmd("--help")
*** DONE IndexedScene for use with indexed images
*** DONE exporting console_out does not indicate that .png will be added
*** TODO a way for a target to pass its own config (for this, move config file parsing location to config.rs and use builder pattern to overwrite fields set by config)
*** TODO fn paint_pixel(&mut self, coord: UCoord, new_pixel: Option<T>, opacity: u8) -> Result<(), SceneError>
*** TODO command history (check if problems can be solved with default implementation, if not, use flags to determine whether target wants provide implementation for console_out or use default implementation)
*** TODO rename UiFn to Cmd
*** TODO like every_frame, have entry initialize to run uifns on startup
*** DONE downscaling of artwork while importing (1280x1280 "/10" = 128x128)
*** TODO Makefile
*** TODO defined palette contains 10 colors, foreground+background+eight defined colors. switchForeground is a wrapper that performs Palette.changeTo(1, <input>). switchBackground is a wrapper that performs Palette.changeTo(2, <input>)
*** TODO (pixylenetui) refresh on terminal resize for both targets [[https://docs.rs/crossterm/latest/crossterm/event/enum.Event.html#variant.Resize][Resize]]. b_console/b_camera/b_statusline should then be loaded from a fn rather than attributes on Controller
*** TODO refactor all error handling so draws as paragraph if too big (use lua action invocation as reference). OR, handle all error messages larger than console size by converting them to cmdin's that print messages in chunks of console size, or by printing them in large window using draw_paragraph
*** TODO Png to/fro Scene: fill more color-type/bit-depth combos
*** TODO dont let config list key that RunKey's itself. crashes the app
*** TODO new actions 'GoTo' (to get something like vim's 'gg' and 0) and 'ClearAllCursors'
*** TODO use image source bit-depth/color-type or from config.toml
*** TODO dont let exported or saved files overwrite existing files
*** DONE Clap parses PathBuf instead of path string for png file or config file [[https://www.rustadventure.dev/introducing-clap/clap-v4/accepting-file-paths-as-arguments-in-clap][Tutorial]]

** Documentation
*** TODO "Dependency Justification" for paper like done on crossterm's github
*** TODO manual

** New Systems
*** TODO Colorschemes are sets of colors. have some default and custom can be defined in toml config
*** TODO some kind of global buffer hashmap for use for actions. for example: opacity control setting for pencils, or metadata field on project that lets you write "tags" to pixels on a layer or directly to layer and lets you search for them later
*** TODO copy-and-paste action that actually copies the pixels to clipboard
*** TODO layers vec and layer_order are separate and "tag-based" so that moving layers is trivial
*** TODO remove console_in and let all input be handled by controller showing typing of input through simply console_out

** New Features
*** TODO Provide From<(r,g,b)>, From<(r,g,b,a)> and From<&str> impl for Pixel
*** TODO Namespace that lets you 'write' colors line-by-line, left-to-right. also the earlier idea of ooze mode (still present down below)
*** TODO alternative to vim's :qall
*** TODO config setting to by default display layers with black background or all layers before it or all layers
*** TODO project file includes lua actions (& maybe raw actions) for consistency. in this case --ignore-local-actions flag stops local actions from overwriting lua actions shipped with project
*** TODO disable unrecognized key warnings from config
*** TODO Method (& corresponding Lua field) layers on canvas that returns a vector of layers
*** TODO implement Project::resize and private Canvas::resize and make comment about how Canvas can only be resized from Project
*** TODO add more metamethods to Lua interface to Coord (==, <, <=, -, %, //, __tostring, etc.)
*** TODO action for layer mute can be modified by giving user string like 1011101 indicating layers currently showing and user can modify and submit (like dwm)
*** TODO enable change-tree for memento action-manager
*** HOLD alternative fn ActionManager::perform_directly() directly takes dyn Action (whats the point, how will you use this)
*** TODO use [[https://lib.rs/crates/is-terminal][isTerminal]] in target initialize for crossterm and minifb just to be safe

** Aesthetics
*** TODO cursor color is calculated as color most visible on corresponding pixel color
*** TODO vim-like shortening of file paths (eg: /home/bhavya/dev becomes /h/b/dev)

** Optimizations / Best Practices / Refactors / Ease of Use
*** TODO cargo feature flag to load no std-actions
*** TODO native action layer/new should have option not to prompt user but directly used equipped color
*** TODO cli option in pixyleneui to disable Lua VM entirely
*** TODO check if good practice to use globals Project and Console in lua rather than passing same to perform
*** TODO maybe better to make CanvasFile, ProjectFile traits impl'd by Canvas & Project respectively. then you can do Canvas.read, Canvas.write
*** TODO remove Pixylene as a type from libpixylene, only Project is required. After this, PixyleneDefaults will split into ProjectDefaults & CanvasDefaults
*** TODO make Pixylene::open_project/open_canvas/import take strings and return serialized & vice versa. let pixylene-ui handle all filing
*** TODO make serde optional for libpixylene
*** TODO switch x and y syntax since game design often uses flipped
*** TODO prelude of types required to make a new target
*** TODO let (x,y) parse into UCoord/Coord in lua interface
*** TODO safe Coord (& other types) methods like add_safe, add_mut_safe, mult_safe & mult_mut_safe

** Done
*** DONE dirs to get actions.lua and config.toml from XDG_CONFIG_DIR/pixylene
*** DONE replace project Lua value fields with Rc<RefCell<Project>>. use temp for reference
*** DONE show layer opacity & mute in statusline
*** DONE helper screen to show keybind <-> actions map
*** DONE replace crossterm's keys with keymap-rs's keymap
*** KILL command parsing: if user enters New and it fails, retry with New {} (which succeeds). do for all (if shifting to clap for cmd parsing, not needed)
*** KILL dont let Project.focus go past present layers, make it private ABDF (i trust user)
*** DONE shorter UiFn names or find a way to declare different serde name for them
*** KILL UiFn is trait implementing serde instead of enum (this will prevent us from even being able to serialize uifns)
*** KILL consider including actions in same scope as commands but with first letter capital as done in neovim for built-in and user fns (No)
*** DONE use PathBuf for writing and exporting files
*** DONE deal with minifb returning too many useless keys
*** DONE Namespace keybinds such that modes can be created/modified from the config file
*** DONE it would be good if palette's equipped color is guaranteed to always exist and is some default color if palette is empty. helps the action authors
*** DONE plaintext serialization of Canvas
*** KILL pay attention to making switching between :showlayer and :showproject easy again (kinda tedious, so giving up on this)
*** DONE Convert UiFn::GoToSession(u8) to UiFn::GoToSession(Args) so that can be called from console. do similar for others like RunAction and RunCommand (consider using toml)
*** KILL draw_paragraph similar to telescope-like neovim window (thats too fancy, what we have now works)
*** KILL Flexbox (taffy) to arrange statusbar items (overkill as hell)
*** KILL only 1 mode for selections, and three kinds of selections allowed: block, row or column (we are way past that)
*** KILL Action::perform_action returns Changes::Single or Change::Multiple (we are slowly moving away from command pattern and towards memento pattern of actions)
*** KILL clap initializer for Pixylene::new() that opens inquire menu when called "$ pixylenetui new". optional flag -y takes default for all settings (overkill & difficult)
*** KILL use Decorate::output() again & fix parameters (String vs &static 'str) (abdf)

* STRUCTURE
** KEY MODES
*** Vim Like
**** NORMAL
cc -> clear cursors (now no-cursor errors)
cl -> add all pixels on layer to cursor
ca -> add all pixels in project to

**** PREVIEW
0 -> entire project
i -> layer i
default -> last open or entire project is last open corresponds to deleted layer

**** GRID SELECTION
add cursors by dragging second corner of rectangle

**** POINT SELECTION
add cursors one by one by navigating and hitting Enter

*** Emacs Like

- *_Basic_*
  - _Up, Down, Left, Right_

- *_Project_*
  - _Ctrl+O_: toggle ooze mode in which equipped color is filled to every new pixel that is navigated to
    (other synonyms to use if name-collision: dispense, dribble, spill, drip, drizzle)
  - _Ctrl+S_: start default or previous shape
  - _Ctrl+Shift+S_: select new shape and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+E_: start default or previously shaped eraser
  - _Ctrl+Shift+E_: select new shape for eraser and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+C_:
  - _Ctrl+L_: manage layer
    - _n_: new layer
    - _d_: delete layer
    - _r_: rename layer
    - _c_: clone layer
    - _-_: go to lower layer
    - _+_: go to upper layer
    - _[0-9]_: go to ith layer
  - _Alt+x_: command

- *_Session_*
  - _Ctrl+S_: save project
  - _Ctrl+Z_: undo
  - _Ctrl+Y_: redo
  - _command<ex>_: export
