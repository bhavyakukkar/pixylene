#+title: Pixylene Notes
#+author: Bhavya Kukkar
* TASKS
** Aspects
*** Compatibility for PyQT GUI
**** Tasks
***** DONE a way for a target to pass its own config (for this, move config file parsing location to config.rs and use builder pattern to overwrite fields set by config)
***** DONE mouse mouse mouse
** Next
*** TODO like every_frame, at_startup that does something at startup. also include helper message in at_startup for the default config
*** TODO layer operations still not given reasonable keybinds
*** DONE fix bug where any eprintln's in Controller::new_session don't get a chance because target.finalize() exit(1)'s.
*** TODO can't export any indexed images because resize() not implemented for indexed pngs and resize() is always called by Pixylene::export
*** TODO try compiling web-target to wasm32-unknown-emscripten
*** TODO refuse compilation of target-web bin if lua feature enabled
*** TODO (pixylenetui) refresh on terminal resize for both targets [[https://docs.rs/crossterm/latest/crossterm/event/enum.Event.html#variant.Resize][Resize]]. b_console/b_camera/b_statusline should then be loaded from a fn rather than attributes on Controller
*** TODO new actions 'GoTo' (to get something like vim's 'gg' and 0) and 'ClearAllCursors'
*** TODO uifn that runs last action, not just last action that modified the canvas
*** TODO replace individual import_ export_ tests with single tests that attempt operations on an array of different images and canvases
*** TODO fn paint_pixel(&mut self, coord: UCoord, new_pixel: Option<T>, opacity: u8) -> Result<(), SceneError>
*** TODO command history (check if problems can be solved with default implementation, if not, use flags to determine whether target wants provide implementation for console_out or use default implementation)
*** TODO rename UiFn to Cmd
*** TODO like every_frame, have entry initialize to run uifns on startup
*** TODO Makefile
*** TODO defined palette contains 10 colors, foreground+background+eight defined colors. switchForeground is a wrapper that performs Palette.changeTo(1, <input>). switchBackground is a wrapper that performs Palette.changeTo(2, <input>)
*** TODO refactor all error handling so draws as paragraph if too big (use lua action invocation as reference). OR, handle all error messages larger than console size by converting them to cmdin's that print messages in chunks of console size, or by printing them in large window using draw_paragraph
*** TODO Png to/fro Scene: fill more color-type/bit-depth combos
*** TODO console has cmdout that takes ColoredStrings instead of plain strings. start with controller.console_out, then implement in lua
*** TODO dont let config list key that RunKey's itself. crashes the app
*** TODO use image source bit-depth/color-type or from config.toml
*** TODO dont let exported or saved files overwrite existing files

** Documentation
*** TODO "Dependency Justification" for paper like done on crossterm's github
*** TODO manual

** New Systems
*** TODO Colorschemes are sets of colors. have some default and custom can be defined in toml config
*** TODO some kind of global buffer hashmap for use for actions. for example: opacity control setting for pencils, or metadata field on project that lets you write "tags" to pixels on a layer or directly to layer and lets you search for them later
*** TODO copy-and-paste action that actually copies the pixels to clipboard
*** TODO layers vec and layer_order are separate and "tag-based" so that moving layers is trivial
*** TODO remove console_in and let all input be handled by controller showing typing of input through simply console_out

** New Features
*** TODO Provide From<(r,g,b)>, From<(r,g,b,a)> and From<&str> impl for Pixel
*** TODO Namespace that lets you 'write' colors line-by-line, left-to-right. also the earlier idea of ooze mode (still present down below)
*** TODO alternative to vim's :qall
*** TODO config setting to by default display layers with black background or all layers before it or all layers
*** TODO project file includes lua actions (& maybe raw actions) for consistency. in this case --ignore-local-actions flag stops local actions from overwriting lua actions shipped with project
*** TODO disable unrecognized key warnings from config
*** TODO Method (& corresponding Lua field) layers on canvas that returns a vector of layers
*** TODO implement Project::resize and private Canvas::resize and make comment about how Canvas can only be resized from Project
*** TODO add more metamethods to Lua interface to Coord (==, <, <=, -, %, //, __tostring, etc.)
*** TODO action for layer mute can be modified by giving user string like 1011101 indicating layers currently showing and user can modify and submit (like dwm)
*** TODO enable change-tree for memento action-manager
*** HOLD alternative fn ActionManager::perform_directly() directly takes dyn Action (whats the point, how will you use this)
*** TODO use [[https://lib.rs/crates/is-terminal][isTerminal]] in target initialize for crossterm and minifb just to be safe

** Aesthetics
*** TODO cursor color is calculated as color most visible on corresponding pixel color
*** TODO vim-like shortening of file paths (eg: /home/bhavya/dev becomes /h/b/dev)

** Optimizations / Best Practices / Refactors / Ease of Use
*** TODO cargo feature flag to load no std-actions
*** TODO native action layer/new should have option not to prompt user but directly used equipped color
*** TODO cli option in pixyleneui to disable Lua VM entirely
*** TODO check if good practice to use globals Project and Console in lua rather than passing same to perform
*** TODO maybe better to make CanvasFile, ProjectFile traits impl'd by Canvas & Project respectively. then you can do Canvas.read, Canvas.write
*** TODO remove Pixylene as a type from libpixylene, only Project is required. After this, PixyleneDefaults will split into ProjectDefaults & CanvasDefaults
*** TODO make Pixylene::open_project/open_canvas/import take strings and return serialized & vice versa. let pixylene-ui handle all filing
*** TODO make serde optional for libpixylene
*** TODO switch x and y syntax since game design often uses flipped
*** TODO prelude of types required to make a new target
*** TODO let (x,y) parse into UCoord/Coord in lua interface
*** TODO safe Coord (& other types) methods like add_safe, add_mut_safe, mult_safe & mult_mut_safe

* STRUCTURE
** KEY MODES
*** Vim Like
**** NORMAL
cc -> clear cursors (now no-cursor errors)
cl -> add all pixels on layer to cursor
ca -> add all pixels in project to

**** PREVIEW
0 -> entire project
i -> layer i
default -> last open or entire project is last open corresponds to deleted layer

**** GRID SELECTION
add cursors by dragging second corner of rectangle

**** POINT SELECTION
add cursors one by one by navigating and hitting Enter

*** Emacs Like

- *_Basic_*
  - _Up, Down, Left, Right_

- *_Project_*
  - _Ctrl+O_: toggle ooze mode in which equipped color is filled to every new pixel that is navigated to
    (other synonyms to use if name-collision: dispense, dribble, spill, drip, drizzle)
  - _Ctrl+S_: start default or previous shape
  - _Ctrl+Shift+S_: select new shape and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+E_: start default or previously shaped eraser
  - _Ctrl+Shift+E_: select new shape for eraser and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+C_:
  - _Ctrl+L_: manage layer
    - _n_: new layer
    - _d_: delete layer
    - _r_: rename layer
    - _c_: clone layer
    - _-_: go to lower layer
    - _+_: go to upper layer
    - _[0-9]_: go to ith layer
  - _Alt+x_: command

- *_Session_*
  - _Ctrl+S_: save project
  - _Ctrl+Z_: undo
  - _Ctrl+Y_: redo
  - _command<ex>_: export
