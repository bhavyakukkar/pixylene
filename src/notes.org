* TASKS
#+description: Tasks that need to be done
** FUNCTIONAL
*** [11/23] NEXT
- [X] remove colored as dependency of libpyxlene
- [3/3] (libpyxelene) palette has 2 methods to change specified color
  - [X] changeToExisting that takes index of other color in palette
  - [X] changeTo that takes direct hex value
  - [X] (libpyxelene) rectangularfill takes a palette_index too
- [X] Change::Lock and Change::Unlock to signal to action-manager to lock, or perform from an action that locks only causes action-manager to lock after Change::Start passed
- [X] failed action must enter a reset sequence. maybe make your life easier by making actions clonable?
- [X] layer error literature (Pixylene::export depends on Layer::merge returning 'can only merge >=2 layers')
- [2/2] Camera has vector of pixels called 'selection', empty by default
  - [X] Focus already corresponds to pixel on the scene grid and not on the CameraPixel grid, move focus out of Camera (and call it cursor) and into Project, which is passed to Camera::render_scene as a parameter
  - [X] New attribute selection is a vector of coords corresponding to Scene pixels
- [X] DrawAllCursors uses DrawOnce in the same way MoveAllCursors uses MoveOneCursor
- [X] Pencil is then a wrapper around DrawAllCursors to use project's palette-index for color
- [1/2] PREVIEW MODE
  - [X] view with merged_scene() ["Preview" Mode] is fundamentally different from a view of a single layer
  - [ ] implement something to include new ProjectPixel in pixylenetui/main
- [ ] ActionManager needs to detect overwriting of undo-history and cascade all changes after the overwriting change
- [ ] restructure modules. layer, camera, scene & palette all are composed children of Project, so have them in a project module
- [ ] wrappers/builders for each action, since, for eg., rectangularfill needs its struct to initialize with start_corner = None, and start_corner is not a parameter that user decide like the palette_index parameter
- [ ] each layer has a blendmode (like in gimp) and tags are used at any time to render only tagged layers (dwm tags)
- [ ] action that lets you copy and paste pixels & doesn't lock the Action Manager
- [ ] wrapper for Camera::render() so that a Scene doesn't need to be passed as parameter
- [0/3] (pixylenetui)
  - [ ] defined palette contains 10 colors, foreground+background+eight defined colors
  - [ ] switchForeground is a wrapper that performs Palette.changeTo(1, <input>)
  - [ ] switchBackground is a wrapper that performs Palette.changeTo(2, <input>)
- [ ] project is immutable, scene-locking actions receive the mutable scene but can use the immutable project for things like Project.getFocus(), similar for camera-locking actions
- [ ] Action::perform_action returns Changes::Single or Change::Multiple
- [ ] ActionManager::undo returns UndoError
- [X] undo behavior as written on piece of paper
- [ ] get rid of camera.repeat, something of that nature should be managed by PixyleneDisplay
- [ ] Actions that work instantly like MoveCameraUp are fundamentally different from actions that require input like SetPaletteColor
- [X] Actions in different directory actions/
- [X] Pencil action that just does DrawOnce with blending
- [ ] Pixylene::empty
- [X] Action:redo because you did a bad job on Action:undo
- [X] new branch to implement savefile on Project
*** AT SOME POINT IN TIME
**** [1/11] SMALL CHANGE
- [ ] Decorate::output()'s parameters need to be changed (String vs &static 'str)
- [ ] (pixylenetui) clear error after valid action has been entered and performed
- [ ] perform_action returns VecDeque of Change's
- [X] Png::open errors returned as debug strings similar to Png::save
- [ ] Mode that lets you 'write' colors line-by-line, left-to-right
- [ ] add_action may throw err if action-name already exists
- [ ] Mode that lets you draw the same color for a continued camera motion and pixels draw at every new camera focus
- [ ] Camera.get_focus() so that Camera.focus can be made private
- [ ] RectangularOutline Action
- [ ] Png to/fro Scene: fill more color-type/bit-depth combos
- [ ] "Dependency Justification" for paper like done on crossterm's github
**** [0/4] MEDIUM CHANGE
- [ ] an action that can let you write "tags" to pixels on a layer and let you search for them later
- [ ] savefiles be plaintext so people can use vcs on them
- [ ] better error reporting when action fails, maybe debug fmt for actions too?
- [ ] camera should be able to set focus to coord not in scene, just not be able to set_pixel there
**** [0/3] LARGE CHANGE
- [ ] builder pattern for app, so that can chain add_action and perform method calls
- [ ] toml for default impl of Pixylene::import & Pixylene::new that includes palette
- [ ] change-tree instead of change-stack, doesn't forget future changes after changes in undoed state
*** MAYBE / MAYBE NOT
**** [0/1] SMALL CHANGE
- [ ] camera has group of selected pixels (for visual mode)
**** [0/1] MEDIUM CHANGE
- [ ] ActionManager::perform() directly takes dyn Action
**** [0/0] LARGE CHANGE
** NON-FUNCTIONAL [0/0]
*** NEXT [0/0]
*** AT SOME POINT IN TIME [0/0]
**** BIG CHANGE [0/1]
* PROS & CONS
#+description: I weight the pros and cons for a feature or decision here
- [X] SELECTIONS MANAGED BY AN ACTION vs CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
  1. SELECTIONS MANAGED BY AN ACTION
     _Pros:_
     + no extra features need to be implemented
     _Cons:_
     + simple tasks like copy & paste are usually native behavior
     + performing action for each pixel in selection will be really difficult since requires selection Action to perform unknown runtime chosen per-pixel Action [ deal-breaker ]
  2. CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
     _Pros:_
     _Cons:_
     + medium feature integration
     + selections might be native, copy and paste still needs an action but smaller
* STRUCTURE
** MODES
InCamera
SettingLayer
Setting
** STATE
|               | NoProjectOpen | ProjectOpen                         |
|---------------+---------------+-------------------------------------|
| NoProjectOpen |               | open_project, open_png, new_project |
| ProjectOpen   | close_project |                                     |
|               |               |                                     |

- Action on performing may be complete/incomplete
- Complete action on performing will return a new reverted Action
- Incomplete action on performing will return nothing

(or)

- Action on performing may be complete/incomplete
- Complete action on performing will become the reverted Action and return done
- Incomplete action on performing will return 



- value of action type will get created but wont be destroyed until it returns a Change::End or Change::StartEnd

** SESSION
- project-path
** COMMANDS
| Command              | Arguments    | Session                                                           | Done |
|----------------------+--------------+-------------------------------------------------------------------+------|
| quit                 | -            | -                                                                 |      |
| open                 | project-path | > project-path; > project; < project-path?                        |      |
| save                 | -            | < project-path; < project                                         |      |
| import               | png-path     | > project; > project-path? (store in same directory); > png-path? |      |
| export               | png-path     | < png-path?                                                       |      |
| perform              | action-name  | < action-manager; < project                                       |      |
| view                 |              | < project                                                         |      |
| layer new            |              | < project; < background-color                                     |      |
| layer <> del         |              | < project                                                         |      |
| layer <> set_opacity | opacity      | < project                                                         |      |
| palette <> set       | color        | < project                                                         |      |
