#+title: Pixylene Notes
#+author: Bhavya Kukkar
* TASKS
#+description: Tasks that need to be done
** ROAD TO NEXT STOP
*** PUBLIC
- [ ] some kind of global opacity control setting for pencils
- [ ] helper screen to show keybind <-> actions map

*** PRIVATE
- [0/3] (pixylenetui)
  - [ ] defined palette contains 10 colors, foreground+background+eight defined colors
  - [ ] switchForeground is a wrapper that performs Palette.changeTo(1, <input>)
  - [ ] switchBackground is a wrapper that performs Palette.changeTo(2, <input>)
- [ ] clap initializer for Pixylene::new() that opens inquire menu when called "$ pixylenetui new". optional flag -y takes default for all settings
- [ ] actions to make/move/remove layers
- [ ] new ActionError::OnlyCursorsInFocusSupported

** FUNCTIONAL
*** [5/24] NEXT
- [X] show cursor even when on None pixel
- [X] arrow keys instead of hjkl
- [X] new pencil to act as eraser
- [ ] make application safer by having indexes like layer number only be something like u8 or u16
- [ ] deprecate MoveOneCursor in favorof SetOneCursor
- [ ] make fn to deal with cursors (for one, their shouldn't be able to be 2 cursors at the same place)
- [ ] (pixylenetui) refresh on terminal resize [[https://docs.rs/crossterm/latest/crossterm/event/enum.Event.html#variant.Resize]]
- [ ] only 1 mode for selections, and three kinds of selections allowed: block, row or column
- [ ] new actions 'GoTo' (to get something like vim's 'gg' and 0) and 'ClearAllCursors'
- [ ] replace rectangularfill color with palette color
- [ ] divide pixylenetui/main.rs into two fns where second function returns result and main just logs all errors to cmdout()
- [ ] dont let layer go past number of layers
- [ ] not worth having complicated project files just to save cursors, camera & focus
- [X] add focus coordinates to statusline
- [ ] pixylene::export adds black background that preview uses, let exports have transparent bgs
- [X] pixylene_tui.rs:317 -> let user type project file if project_file_path is empty
- [ ] a toggle-able strict setting where focus can neither go to non-existense layers nor non-existent coords on a layer
- [ ] a way to let actions called by perform_action be untracked. they should be able to set with a boolean in pixylenetui/actions.rs
- [ ] Pixylene::import starts with single layer
- [ ] camera_dim being in project gets persisted and reopening in different terminal size messed things up (since Pixylene::import doesnt take defaults). since focus and cursors are directly in project, consider moving camera out of project and directly in pixylene
  alternatively, let Pixylene::import also use defaults
- [ ] since you will use methods to ensure project.cursors remains stable, make a non-result method to return pixel at given cursor
- [ ] (pixylenetui) only enable raw mode during get_key instead of only disabling raw mode during cmdin
- [ ] (pixylenetui) show cursor again during Command mode (impl in cmdin)
- [ ] layer selection uses 1-based indexing
- [ ] ActionManager needs to detect overwriting of undo-history and cascade all changes after the overwriting change
- [ ] fix warnings
- [ ] wrappers/builders for each action, since, for eg., rectangularfill needs its struct to initialize with start_corner = None, and start_corner is not a parameter that user decide like the palette_index parameter
- [ ] each layer has a blendmode (like in gimp)
- [ ] project is immutable, scene-locking actions receive the mutable scene but can use the immutable project for things like Project.getFocus(), similar for camera-locking actions
- [ ] Actions that work instantly like MoveCameraUp are fundamentally different from actions that require input like SetPaletteColor
- [ ] layer mute can be modified by giving user string like 1011101 indicating layers currently showing and user can modify and submit

*** AT SOME POINT IN TIME
**** [0/10] SMALL CHANGE
- [ ] replace crossterm::execute!() with crossterm::queue!()
- [ ] (pixylenetui) clear error after valid action has been entered and performed
- [ ] perform_action returns VecDeque of Change's
- [ ] add_action may throw err if action-name already exists
- [ ] use Decorate::output() again & fix parameters (String vs &static 'str)
- [ ] RectangularOutline Action
- [ ] Mode that lets you 'write' colors line-by-line, left-to-right
- [ ] Mode that lets you draw the same color for a continued camera motion and pixels draw at every new camera focus
- [ ] Png to/fro Scene: fill more color-type/bit-depth combos
- [ ] "Dependency Justification" for paper like done on crossterm's github

**** [0/5] MEDIUM CHANGE
- [ ] all project fields that have constraints should be private, for eg., project.cursors must be private, however, project.focus can be public (according to the system now at least). at the moment ToggleCursorAtFocus is able to create a cursor outside of the scene which bugs out every single action
- [ ] complex actions that perform multiple smaller actions, when one of those smaller actions fail, should take the changes of the successfull and perform them to revert them back
- [ ] metadata field on project that lets you write "tags" to pixels on a layer or directly to layer and lets you search for them later
- [ ] projects can also be filed in plaintext so people can use vcs on them
- [ ] better error reporting when action fails, maybe debug fmt for actions too?

**** [0/3] LARGE CHANGE
- [ ] change-tree instead of change-stack, doesn't forget future changes after changes in undoed state
- [ ] toml for default impl of Pixylene::import & Pixylene::new that includes palette
- [ ] builder pattern for app, so that can chain add_action and perform method calls
- [ ] copy-and-paste action that actually copies the pixels to clipboard

*** MAYBE / MAYBE NOT
**** [0/3] SMALL CHANGE
- [ ] restructure modules. layer, camera, scene & palette all are composed children of Project, so have them in a project module
- [ ] get rid of camera.repeat, something of that nature should be managed by PixyleneDisplay
- [ ] validation to not let Project.focus.layer exceed number of layers in the project

**** [0/3] MEDIUM CHANGE
- [ ] use more iterators: impl iterator for scene, return of render_scene and return of render_layer
- [ ] alternative fn ActionManager::perform_directly() directly takes dyn Action
- [ ] Action::perform_action returns Changes::Single or Change::Multiple

**** [0/0] LARGE CHANGE
** NON-FUNCTIONAL
* PROS & CONS
#+description: I weigh the pros and cons for a feature or decision here
- [X] SELECTIONS MANAGED BY AN ACTION vs CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
  1. SELECTIONS MANAGED BY AN ACTION
     _Pros:_
     + no extra features need to be implemented
     _Cons:_
     + simple tasks like copy & paste are usually native behavior
     + performing action for each pixel in selection will be really difficult since requires selection Action to perform unknown runtime chosen per-pixel Action [ deal-breaker ]
  2. CAMERA HAS VECTOR OF PIXELS CALLED SELECTION
     _Pros:_
     _Cons:_
     + medium feature integration
     + selections might be native, copy and paste still needs an action but smaller
- [X] LAYER INDEX ARE 1-BASE INDEXED
  _Pros:_
  - index 0 can denote all layers, in Preview mode, 0 can be used to preview project
  - dwm does it too (actually every wm)
  _Cons:_
  - none
- [X] LAYER NEW/DELETE ARE PROJECT METHODS INSTEAD OF ACTIONS
  _Pros:_
  _Cons:_
  - cannot be undoed
  - more difficult to implement

* STRUCTURE
#+description: I document the structure of my application here
** KEY MODES
*** Vim Like
**** NORMAL
cc -> clear cursors (now no-cursor errors)
cl -> add all pixels on layer to cursor
ca -> add all pixels in project to

**** PREVIEW
0 -> entire project
i -> layer i
default -> last open or entire project is last open corresponds to deleted layer

**** GRID SELECTION
add cursors by dragging second corner of rectangle

**** POINT SELECTION
add cursors one by one by navigating and hitting Enter

*** Emacs Like

- *_Basic_*
  - _Up, Down, Left, Right_

- *_Project_*
  - _Ctrl+O_: toggle ooze mode in which equipped color is filled to every new pixel that is navigated to
    (other synonyms to use if name-collision: dispense, dribble, spill, drip, drizzle)
  - _Ctrl+S_: start default or previous shape
  - _Ctrl+Shift+S_: select new shape and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+E_: start default or previously shaped eraser
  - _Ctrl+Shift+E_: select new shape for eraser and then start
    - _r_: rectangular
    - _e_: ellipse
  - _Ctrl+C_:
  - _Ctrl+L_: manage layer
    - _n_: new layer
    - _d_: delete layer
    - _r_: rename layer
    - _c_: clone layer
    - _-_: go to lower layer
    - _+_: go to upper layer
    - _[0-9]_: go to ith layer
  - _Alt+x_: command

- *_Session_*
  - _Ctrl+S_: save project
  - _Ctrl+Z_: undo
  - _Ctrl+Y_: redo
  - _command<ex>_: export

** STATUSLINE
*([mode]) ([layer 1 of 5]) ([2+8 palette colors]) ([current-action] [scene-locked?] [camera-locked?]) ([3 cursors])*

** STATE
|               | NoProjectOpen | ProjectOpen                         |
|---------------+---------------+-------------------------------------|
| NoProjectOpen |               | open_project, open_png, new_project |
| ProjectOpen   | close_project |                                     |
|               |               |                                     |

** OFFICIAL DOCUMENTATION
Actions are of two types:
    1. Primitive:
    2. Complex:

** SESSION
- Option<last_previewed_layer>
- Option<imported_png_path>
- Option<opened_project_path>

** COMMANDS
| Command              | Arguments    | Session                                                           | Done |
|----------------------+--------------+-------------------------------------------------------------------+------|
| quit                 | -            | -                                                                 |      |
| open                 | project-path | > project-path; > project; < project-path?                        |      |
| save                 | -            | < project-path; < project                                         |      |
| import               | png-path     | > project; > project-path? (store in same directory); > png-path? |      |
| export               | png-path     | < png-path?                                                       |      |
| perform              | action-name  | < action-manager; < project                                       |      |
| view                 |              | < project                                                         |      |
| layer new            |              | < project; < background-color                                     |      |
| layer <> del         |              | < project                                                         |      |
| layer <> set_opacity | opacity      | < project                                                         |      |
| palette <> set       | color        | < project                                                         |      |
